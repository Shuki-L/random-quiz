{"version":3,"sources":["constants.js","App.js","serviceWorker.js","index.js"],"names":["images","id","path","name","questions","App","props","intervalID","getRandomInt","max","Math","ceil","random","floor","stop","clearInterval","interval","setState","running","start","setInterval","imageIndex","length","questionIndex","started","state","this","image","question","className","src","process","style","height","alt","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAAaA,EAAS,CACpB,CAAEC,GAAI,EAAGC,KAAM,YAAaC,KAAM,SAClC,CAAEF,GAAI,EAAGC,KAAM,aAAcC,KAAM,cACnC,CAAEF,GAAI,EAAGC,KAAM,cAAeC,KAAM,SACpC,CAAEF,GAAI,EAAGC,KAAM,aAAcC,KAAM,iBACnC,CAAEF,GAAI,EAAGC,KAAM,aAAcC,KAAM,YACnC,CAAEF,GAAI,EAAGC,KAAM,cAAeC,KAAM,sBACpC,CAAEF,GAAI,EAAGC,KAAM,aAAcC,KAAM,aACnC,CAAEF,GAAI,EAAGC,KAAM,cAAeC,KAAM,iBACpC,CAAEF,GAAI,EAAGC,KAAM,aAAcC,KAAM,aACnC,CAAEF,GAAI,EAAGC,KAAM,cAAeC,KAAM,gBACpC,CAAEF,GAAI,GAAIC,KAAM,cAAeC,KAAM,gBAG1BC,EAAY,CACvB,cACA,cACA,cACA,cACA,cACA,cACA,cACA,eCwDaC,G,wDAvEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAHRC,WAAa,EAEM,EAUnBC,aAAe,SAACC,GACd,OAAOC,KAAKC,KAAKD,KAAKE,SAAWF,KAAKG,MAAMJ,KAX3B,EAkBnBK,KAAO,WACLC,cAAc,EAAKC,UACnB,EAAKC,SAAS,CAAEC,SAAS,KApBR,EAuBnBC,MAAQ,WACN,EAAKH,SAAWI,aACd,kBACE,EAAKH,SAAS,CACZI,WAAY,EAAKb,aAAaR,EAAOsB,OAAS,GAC9CC,cAAe,EAAKf,aAAaJ,EAAUkB,OAAS,GACpDJ,SAAS,EACTM,SAAS,MAEb,MA9BF,EAAKC,MAAQ,CACXJ,WAAY,EACZE,cAAe,EACfL,SAAS,EACTM,SAAS,GANM,E,mEAejBT,cAAcW,KAAKV,Y,+BAsBnB,IAAMW,EAAQ3B,EAAO0B,KAAKD,MAAMJ,YAC1BO,EAAWxB,EAAUsB,KAAKD,MAAMF,eAEtC,OACE,yBAAKM,UAAU,OACb,4BAAQA,UAAU,cAChB,yBACEC,IAAG,UAAKC,GAAL,+BAAkDJ,EAAMzB,MAC3D2B,UAAU,WACVG,MAAiC,KAA1BN,KAAKD,MAAMJ,WAAoB,CAAEY,OAAQ,SAAY,GAC5DC,IAAI,SAELP,EAAMxB,MAAQ,2BAAIwB,EAAMxB,MAExBuB,KAAKD,MAAMD,SAAW,2BAAII,GAE3B,yBAAK3B,GAAG,YAAY4B,UAAU,YAC3BH,KAAKD,MAAMP,SACV,4BAAQW,UAAU,eAAeM,QAAST,KAAKZ,MAA/C,SAIAY,KAAKD,MAAMP,SACX,4BAAQW,UAAU,iBAAiBM,QAAST,KAAKP,OAAjD,gB,GA/DIiB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.31ec237f.chunk.js","sourcesContent":["export const images = [\n  { id: 0, path: \"intro.png\", name: \"intro\" },\n  { id: 1, path: \"image1.png\", name: \"Robb Stark\" },\n  { id: 2, path: \"image2.jpeg\", name: \"Bronn\" },\n  { id: 3, path: \"image3.png\", name: \"Samwell Tarly\" },\n  { id: 4, path: \"image4.png\", name: \"Jon Snow\" },\n  { id: 5, path: \"image5.jpeg\", name: \"Daenerys Targaryen\" },\n  { id: 6, path: \"image6.png\", name: \"Missandei\" },\n  { id: 7, path: \"image7.jpeg\", name: \"Zoti and Zoti\" },\n  { id: 8, path: \"image8.png\", name: \"Voldemort\" },\n  { id: 9, path: \"image9.jpeg\", name: \"Harry potter\" },\n  { id: 10, path: \"image10.png\", name: \"Ron Weasley\" },\n];\n\nexport const questions = [\n  \"Question #1\",\n  \"Question #2\",\n  \"Question #3\",\n  \"Question #4\",\n  \"Question #5\",\n  \"Question #6\",\n  \"Question #7\",\n  \"Question #8\",\n];\n\n//COVID19 questions\n\n// export const questions = [\n//   \"I'll break quarantine only for ______\",\n//   \"Working from home is awesome because ______\",\n//   \"The first thing I'm going to do when the Covid-19 lockdown is over\",\n//   \"Weired habit that you developed in quarantine\",\n//   \"Good habit that you developed in quarantine\",\n//   \"Bad habit that you developed in quarantine\",\n//   \"One person (from all over the world) I would like to be in quarantine with\",\n//   \"One person (from the office) I would like to be in quarantine with\",\n//   \"The SHABAC put an eye on us- what can they tell us about you that we don't already know?\",\n//   \"The first destination I'll fly to when sky will be open again\",\n//   \"What do you miss the most at the office?\",\n//   \"What don't you miss at the office?\",\n//   \"When we back to the office-what is the first restaurant you'll go for lunch?\",\n//   \"What is the first thing you cleaned in your house?\",\n//   \"What do you tell yourself you'll do after the quarantine, and know you're not really going to do that?\",\n//   \"The one thing I missed the most is _____\",\n//   \"What was the best meal you cooked in quarantine?\",\n//   \"What cheers you up in this hard times?\",\n//   \"What is the best TV show/series you watched in quarantine?\",\n//   \"I have a question for you!!\"\n// ];\n","import React, { Component } from \"react\";\nimport { questions, images } from \"./constants\";\nimport \"./App.css\";\n\nclass App extends Component {\n  intervalID = 0;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageIndex: 0,\n      questionIndex: 0,\n      running: false,\n      started: false,\n    };\n  }\n\n  getRandomInt = (max) => {\n    return Math.ceil(Math.random() * Math.floor(max));\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  stop = () => {\n    clearInterval(this.interval);\n    this.setState({ running: false });\n  };\n\n  start = () => {\n    this.interval = setInterval(\n      () =>\n        this.setState({\n          imageIndex: this.getRandomInt(images.length - 1),\n          questionIndex: this.getRandomInt(questions.length - 1),\n          running: true,\n          started: true,\n        }),\n      100\n    );\n  };\n\n  render() {\n    const image = images[this.state.imageIndex];\n    const question = questions[this.state.questionIndex];\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img\n            src={`${process.env.PUBLIC_URL}/random-quiz/images/${image.path}`}\n            className=\"App-logo\"\n            style={this.state.imageIndex === 43 ? { height: \"500px\" } : {}}\n            alt=\"logo\"\n          />\n          {image.name && <p>{image.name}</p>}\n\n          {this.state.started && <p>{question}</p>}\n\n          <div id=\"menuBall1\" className=\"menuBall\">\n            {this.state.running && (\n              <button className=\"ball redball\" onClick={this.stop}>\n                Stop\n              </button>\n            )}\n            {!this.state.running && (\n              <button className=\"ball greenball\" onClick={this.start}>\n                start\n              </button>\n            )}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}